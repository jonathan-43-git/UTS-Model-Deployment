# -*- coding: utf-8 -*-
"""Inferencing_2702223084.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J_5mvJoz0ft8BohpbiU3n_57Eqw4wx83
"""

!pip install streamlit

import numpy as np
import pandas as pd
import joblib
import streamlit as st


ml_model = joblib.load('random_forest_hotel.pkl')
nominal_encode = joblib.load('one_hot_encoding_nominal.pkl')
target_encode = joblib.load('binary_encode_target.pkl')


def main():

    st.title('Hotel Booking Classification')

    num_of_adults = st.number_input('Number of Adults', 0, 4)
    num_of_children = st.number_input('Number of Children', 0, 10)
    num_of_weekend_nights = st.number_input('Number of Weekend Nights', 0, 7)
    num_of_week_nights = st.number_input('Number of Week Nights', 0, 17)
    type_meal_plan = st.selectbox('Type of Meal Plan', ['Meal Plan 1', 'Meal Plan 2', 'Meal Plan 3', 'Not Selected'])
    required_parking_space = st.radio('Required Car Parking Space', [0, 1])
    room_type = st.selectbox('Room Type Reserved', ['Room_Type 1', 'Room_Type 2', 'Room_Type 3', 'Room_Type 4', 'Room_Type 5', 'Room_Type 6', 'Room_Type 7'])
    lead_time = st.number_input('Lead Time', 0, 443)
    arrival_year = st.radio('Arrival Year', [2017, 2018])
    arrival_month = st.number_input('Arrival Month', 1, 12)
    arrival_date = st.number_input('Arrival Date', 1, 31)
    market_segment = st.selectbox('Market Segment Type', ['Aviation', 'Complementary', 'Corporate', 'Offline', 'Online'])
    repeated_guest = st.radio('Repeated Guest', [0, 1])
    num_of_previous_cancellations = st.number_input('Number of Previous Cancellations', 0, 13)
    num_of_previous_bookings_not_canceled = st.number_input('Number of Previous Bookings Not Canceled', 0, 58)
    average_price = st.number_input('Average Price per Room', 0, 540)
    num_of_special_requests = st.number_input('Number of Special Requests', 0, 5)

    # input to dict
    data_dict = {
        'no_of_adults': int(num_of_adults), 'no_of_children': int(num_of_children), 'no_of_weekend_nights': int(num_of_weekend_nights),
        'no_of_week_nights': int(num_of_week_nights), 'type_of_meal_plan': type_meal_plan, 'required_car_parking_space': required_parking_space,
        'room_type_reserved': room_type, 'lead_time': int(lead_time), 'arrival_year': int(arrival_year), 'arrival_month': int(arrival_month),
        'arrival_date': int(arrival_date), 'market_segment_type': market_segment, 'repeated_guest': repeated_guest,
        'no_of_previous_cancellations': int(num_of_previous_cancellations), 'no_of_previous_bookings_not_canceled': int(num_of_previous_bookings_not_canceled),
        'avg_price_per_room': int(average_price), 'no_of_special_requests': int(num_of_special_requests)}

    dataset = pd.DataFrame([list(data_dict.values())],
        columns=[
            'no_of_adults', 'no_of_children', 'no_of_weekend_nights', 'no_of_week_nights', 'type_of_meal_plan', 'required_car_parking_space',
            'room_type_reserved', 'lead_time', 'arrival_year', 'arrival_month', 'arrival_date', 'market_segment_type', 'repeated_guest',
            'no_of_previous_cancellations', 'no_of_previous_bookings_not_canceled', 'avg_price_per_room', 'no_of_special_requests'])


    one_hot_cols = ["type_of_meal_plan", "room_type_reserved", "market_segment_type"]

    dataset_nominal = dataset[one_hot_cols]
    dataset_encoded_nominal = pd.DataFrame(nominal_encode.transform(dataset_nominal),
                                      columns=nominal_encode.get_feature_names_out(one_hot_cols),
                                      index=dataset.index)

    dataset_encoded = pd.concat([dataset.drop(columns=one_hot_cols), dataset_encoded_nominal], axis=1)
    dataset_encoded_final = dataset_encoded.replace(target_encode)

    if st.button('Predicting Result'):
        features = dataset_encoded_final
        res = predicting_result(features)
        st.success(f'The predicted value is: {res}')


def predicting_result(features):

    input_data = np.array(features).reshape(1, -1)
    prediction_res = ml_model.predict(input_data)
    return prediction_res[0]


if __name__ == '__main__':
    main()

